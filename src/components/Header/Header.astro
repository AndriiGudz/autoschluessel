---
import styles from './Header.module.css';
import { languages } from '../../i18n/config';

const { lang } = Astro.props;

const navigation = [
  { name: 'Wie funktioniert das', href: '#how-it-works' },
  { name: 'Warum wir', href: '#why-us' },
  { name: 'Bewertungen', href: '#reviews' },
  { name: 'FAQ', href: '#faq' },
  { name: 'Kontakte', href: '#contact' },
];

// Путь к логотипу
const logoPath = "/images/mv-kfz.png";

// Генерируем уникальный ID для хедера
const headerId = "main-header";

// Получаем текущий путь без языкового префикса для создания ссылок переключателя языков
const currentPath = Astro.url.pathname.split('/').slice(2).join('/');

// Убедимся, что язык существует в словаре, иначе используем первый доступный
const safeLanguage = lang in languages ? lang : Object.keys(languages)[0];
---

<header id={headerId} class={styles.header}>
  <div class={styles.logo}>
    <a href={`/${lang}/`}>
      <img src={logoPath} alt="MV_KFZ Autoschlüssel Logo" class={styles.logoImage} />
    </a>
  </div>
  <nav class={styles.menu}>
    <ul class={styles.navLinks}>
      {navigation.map((item) => (
        <li>
          <a href={item.href}>{item.name}</a>
        </li>
      ))}
    </ul>
    
    <div class={styles.rightMenu}>
      <!-- Языковой селектор -->
      <div class={styles.langSelector} id="lang-selector" data-active="false">
        <div class={styles.currentLang}>
          {languages[safeLanguage as keyof typeof languages]}
        </div>
        <div class={styles.langDropdown}>
          {Object.entries(languages).map(([code, name]) => (
            <a 
              href={`/${code}/${currentPath}`}
              class={code === lang ? styles.activeLang : ''}
            >
              {name}
            </a>
          ))}
        </div>
      </div>
      
      <button>Jetzt bestellen</button>
    </div>
  </nav>
</header>

<!-- Пространство для компенсации фиксированного хедера -->
<div class={styles.headerSpacer}></div>

<script define:vars={{ headerId }}>
  // Скрипт для добавления класса при скролле
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById(headerId);
    
    if (header) {
      const scrollThreshold = 50; // Пороговое значение скролла
      
      // Функция проверки позиции скролла
      const handleScroll = () => {
        if (window.scrollY > scrollThreshold) {
          header.classList.add('headerScrolled'); // Добавляем класс без префикса для поддержки CSS-модулей
        } else {
          header.classList.remove('headerScrolled');
        }
      };
      
      // Слушаем событие скролла
      window.addEventListener('scroll', handleScroll);
      
      // Проверяем скролл при загрузке страницы
      handleScroll();
      
      // Плавная прокрутка при клике на якорные ссылки
      const smoothScroll = (event) => {
        const link = event.target.closest('a');
        if (!link || !link.hash) return;
        
        event.preventDefault();
        
        const targetId = link.hash.substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const headerHeight = header.offsetHeight;
          const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY - headerHeight;
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      };
      
      // Добавляем обработчик для плавной прокрутки
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', smoothScroll);
      });
      
      // Переключатель языка - показать/скрыть dropdown
      const langSelector = document.getElementById('lang-selector');
      if (langSelector) {
        console.log('Языковой селектор найден:', langSelector);
        
        // Устанавливаем начальное состояние
        if (!langSelector.hasAttribute('data-active')) {
          langSelector.setAttribute('data-active', 'false');
        }
        
        langSelector.addEventListener('click', (e) => {
          e.stopPropagation();
          
          // Вместо добавления класса используем data-атрибут
          const isActive = langSelector.getAttribute('data-active') === 'true';
          const newState = isActive ? 'false' : 'true';
          
          console.log('Переключаем состояние селектора:', isActive, '->', newState);
          langSelector.setAttribute('data-active', newState);
        });
        
        // Закрыть dropdown при клике вне селектора
        document.addEventListener('click', () => {
          if (langSelector.getAttribute('data-active') === 'true') {
            console.log('Закрываем селектор по клику вне');
            langSelector.setAttribute('data-active', 'false');
          }
        });
        
        // Наблюдатель для мониторинга изменений атрибута
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.attributeName === 'data-active') {
              const isActive = langSelector.getAttribute('data-active') === 'true';
              console.log('Изменение состояния селектора:', isActive);
            }
          });
        });
        
        observer.observe(langSelector, { attributes: true });
      } else {
        console.error('Языковой селектор не найден!');
      }
    }
  });
</script> 