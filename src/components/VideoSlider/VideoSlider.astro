---
interface VideoItem {
  id: string;
  thumbnail: string;
  title: string;
}

interface Props {
  videos: VideoItem[];
}

const { videos } = Astro.props;
---

<div class="video-slider">
  <div class="slider-container">
    <button class="nav-button prev" id="prev-button">
      <span class="sr-only">Previous</span>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 19L8 12L15 5" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    
    <div class="videos-container" id="videos-container">
      {videos.map((video) => (
        <div class="video-item" data-id={video.id}>
          <div class="thumbnail" style={`background-image: url(${video.thumbnail})`}>
            <div class="play-button">
              <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="24" cy="24" r="24" fill="black" fill-opacity="0.5"/>
                <path d="M32 24L20 32V16L32 24Z" fill="white"/>
              </svg>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <button class="nav-button next" id="next-button">
      <span class="sr-only">Next</span>
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 5L16 12L9 19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>
  
  <div class="slider-dots">
    {videos.map((_, index) => (
      <button class={`dot ${index === 0 ? 'active' : ''}`} data-index={index}></button>
    ))}
  </div>
</div>

<style>
  .video-slider {
    width: 100%;
    background-color: #339CE5;
    padding: 13px 0;
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-self: stretch;
  }

  .slider-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 48px;
    width: 100%;
  }

  .nav-button {
    background: none;
    border: none;
    cursor: pointer;
    color: #FFFFFF;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .videos-container {
    display: flex;
    overflow-x: hidden;
    scroll-behavior: smooth;
    gap: 20px;
  }

  .video-item {
    flex: 0 0 280px;
    height: 180px;
    border-radius: 10px;
    overflow: hidden;
  }

  .thumbnail {
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .play-button {
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .thumbnail:hover .play-button {
    opacity: 1;
  }

  .slider-dots {
    display: flex;
    justify-content: center;
    gap: 8px;
    margin-top: 10px;
  }

  .dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #FFFFFF;
    opacity: 0.5;
    border: none;
    cursor: pointer;
    padding: 0;
  }

  .dot.active {
    opacity: 1;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>

<script>
  const container = document.getElementById('videos-container');
  const prevButton = document.getElementById('prev-button');
  const nextButton = document.getElementById('next-button');
  const dots = document.querySelectorAll('.dot');
  
  let currentIndex = 0;
  const videoItems = document.querySelectorAll('.video-item');
  const itemWidth = videoItems.length > 0 ? (videoItems[0] as HTMLElement).offsetWidth + 20 : 300; // Width + gap
  
  function updateSliderPosition(index: number) {
    if (container) {
      container.scrollLeft = index * itemWidth;
    }
    
    // Update active dot
    dots.forEach((dot, i) => {
      if (i === index) {
        dot.classList.add('active');
      } else {
        dot.classList.remove('active');
      }
    });
    
    currentIndex = index;
  }
  
  if (prevButton) {
    prevButton.addEventListener('click', () => {
      if (currentIndex > 0) {
        updateSliderPosition(currentIndex - 1);
      }
    });
  }
  
  if (nextButton) {
    nextButton.addEventListener('click', () => {
      if (currentIndex < videoItems.length - 1) {
        updateSliderPosition(currentIndex + 1);
      }
    });
  }
  
  dots.forEach((dot) => {
    dot.addEventListener('click', () => {
      const index = parseInt(dot.getAttribute('data-index') || '0');
      updateSliderPosition(index);
    });
  });
  
  // Video click handler
  videoItems.forEach((item) => {
    item.addEventListener('click', () => {
      const videoId = item.getAttribute('data-id');
      if (videoId) {
        // Handle video play (e.g., open modal with video)
        console.log('Play video:', videoId);
      }
    });
  });
</script> 